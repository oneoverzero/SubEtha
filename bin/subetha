#!/usr/bin/env perl

use warnings;
use strict;

use File::Spec;
use File::Basename 'dirname';

use lib join '/', File::Spec->splitdir( dirname(__FILE__) ), '..', 'lib';
use lib '/home/infobot/lib';

use AnyEvent;
use AnyEvent::IRC::Client;
use AnyEvent::IRC::Util qw/prefix_nick/;
use AnyEvent::XMPP::Client;
use AnyEvent::XMPP::Util qw/prep_bare_jid split_jid/;
use AnyEvent::HTTP;
use URL::Encode qw/url_encode_utf8/;
use JSON;
use String::SetUTF8;

use Data::Dumper;

my $VERSION = 0.2;

########################################
# Configuration

my $DEBUG = $ENV{DEBUG} || 1;
my $config_file = $ARGV[0] || '../etc/subetha.cfg';

my $connect_msg =
  "Hi, my name is SubEtha and I'll be your friendly lobster proxy";

# Stuff bellow this line should really be configured in the config file
# specified above in $config_file

my %config = (
    irc_server   => 'irc.freenode.net',
    irc_port     => 6667,
    irc_nick     => 'ultrabot',
    irc_password => 'verys3crit',

    xmpp_jid          => 'mybot@jabber.org',
    xmpp_password     => 'verys3cret',
    xmpp_http_gateway => 'http://partychat-hooks.appspot.com/post/your_id',

    channels => { 'chat@im.partych.at' => 'xmpp', '#testchan' => 'irc' },
);

my $cfg = read_json_conf($config_file);
if ($cfg) {
    %config = %$cfg;
}

if ($DEBUG) {
    warn
"$0: Starting up with DEBUG=$DEBUG, version $VERSION, and the following config:\n";
    warn Dumper( \%config );
}

sub read_json_conf {
    my $filename = shift;
    my $fh;
    if ( !open( $fh, '<', $filename ) ) {
        warn "$0: Error opening the config file \"$filename\": $!\n";
        return;
    }
    my $json_conf = do { local $/; <$fh> };
    my $conf = decode_json($json_conf);
    return $conf;
}

#
########################################

my $c = AnyEvent->condvar;

########################################
# Setup IRC connecttion and stuff

my $irc_con = new AnyEvent::IRC::Client;

$irc_con->reg_cb(
    connect => sub {
        my ( $irc_con, $err ) = @_;

        if ( defined $err ) {
            warn "IRC: connect error: $err\n";
            $c->broadcast("IRC connection borked");
        }
        else {
            warn "IRC: connected.\n" if $DEBUG;
        }
    },

    disconnect => sub {
        my ( $irc_con, $reason ) = @_;

        $reason = "no reason given" unless $reason;
        warn "IRC: disconnected: $reason\n";
        $c->broadcast("IRC got disconnected");
    },

    publicmsg => sub {
        my ( $irc_con, $channel, $ircmsg ) = @_;

        my $who  = prefix_nick( $ircmsg->{prefix} );
        my $text = $ircmsg->{params}->[1];
        warn "IRC: Got \"$channel: $who: $text\"\n" if $DEBUG > 1;
        $text = parse_irc($text);
        if ($text) {
            grapevine(
                {
                    channel => $channel,
                    who     => $who,
                    text    => $text,
                    type    => 'message'
                }
            );
        }
    },

    # Emotes. Gotta catch'em all!
    debug_recv => sub {
        my ( $irc_con, $msg ) = @_;

        my $who     = prefix_nick( $msg->{prefix} );
        my $channel = $msg->{params}->[0];
        my $text    = $msg->{params}->[1];

        if ( !$text || ( $text !~ /ACTION\s+(.+)$/ ) ) {

            # This is not an emote
            return;
        }
        $text = $1;
        chop $text;
        grapevine(
            {
                channel => $channel,
                who     => $who,
                text    => $text,
                type    => 'emote'
            }
        );
    },

    privatemsg => sub {
        my ( $irc_con, $nick, $ircmsg ) = @_;

        #warn Dumper $ircmsg;
        my $who  = prefix_nick( $ircmsg->{prefix} );
        my $text = $ircmsg->{params}->[1];
        warn "IRC: \"$who\" told me \"$text\" in private (to \"$nick\")\n"
          if $DEBUG > 1;
        personal( $who, $text );
    },

    registered => sub { warn "IRC: registered on network\n" if $DEBUG; },

    join => sub {
        my ( $irc_con, $nick, $channel, $is_myself ) = @_;

        if ($is_myself) {
            warn "IRC: Just joined $channel\n" if $DEBUG;
            $irc_con->send_chan( $channel, 'PRIVMSG', $channel, $connect_msg );
        }
    },
);

$irc_con->connect( $config{irc_server}, $config{irc_port},
    { nick => $config{irc_nick} } );

for my $channel ( keys %{ $config{channels} } ) {
    next unless ( $config{channels}{$channel}{type} eq 'irc' );
    warn "IRC: Trying to connect to channel $channel\n" if $DEBUG;
    $irc_con->send_srv( 'JOIN', $channel );
}

########################################
# Setup XMPP connecttion and stuff

my $xmpp_debug = 0;
if ( $DEBUG > 2 ) { $xmpp_debug = 1 }
my $xmpp_con = new AnyEvent::XMPP::Client( debug => $xmpp_debug );

$xmpp_con->reg_cb(
    connected => sub {
        my ( $connection, $account ) = @_;

        warn "XMPP: connected with account " . $account->jid . "\n"
          if $DEBUG;
    },

    session_ready => sub {
        my ($connection) = @_;

        warn "XMPP: Session is ready, let's rock n' roll\n" if $DEBUG;
        for my $channel ( keys %{ $config{channels} } ) {
            next unless ( $config{channels}{$channel}{type} =~ /xmpp/ );
            warn "XMPP: Greeting people on $channel\n" if $DEBUG;
            xmpp_send_message( $connection, $connect_msg, $channel );
        }
    },

    added_account => sub {
        my ( $connection, $account ) = @_;

        warn "XMPP: Account added: " . $account->jid . "\n" if $DEBUG;
    },

    message => sub {
        my ( $connection, $account, $msg ) = @_;

        my $text    = $msg->body;
        my $channel = $msg->from;
        $channel = prep_bare_jid($channel);
        warn "XMPP: Got \"$text\" on \"$channel\"\n" if $DEBUG > 1;
        my ( $who,  $message, $emote ) = parse_xmpp($text);
        my ( $user, $host,    $res )   = split_jid( $config{xmpp_jid} );
        if (   ( $config{channels}{$channel}{type} eq 'broken_xmpp' )
            && ( $text =~ /^\[$user/ ) )
        {

            # We got an echo from ourselves, ignore
            warn "XMPP: Ignoring message, it is an echo of ourselves\n"
              if $DEBUG > 1;
            return;
        }
        my $type = 'message';
        $type = 'emote' if $emote;
        if ($message) {
            grapevine(
                {
                    channel => $channel,
                    who     => $who,
                    text    => $message,
                    type    => $type,
                }
            );
        }
    },

    connect_error => sub {
        my ( $connection, $account, $reason ) = @_;

        warn "XMPP: connection error! JID: "
          . $account->jid
          . ", reason: \"$reason\"\n";
        $c->broadcast("XMPP connection borked");
    },

    error => sub {
        my ( $connection, $account, $error ) = @_;

        warn "XMPP: Error with account "
          . $account->jid . ": \""
          . $error->string . "\"\n";

        # TODO: Probably should try disconnecting and reconnecting here...
    }
);

if ( $config{xmpp_server} ) {
    $xmpp_con->add_account( $config{xmpp_jid}, $config{xmpp_password},
        $config{xmpp_server} );
}
else {
    $xmpp_con->add_account( $config{xmpp_jid}, $config{xmpp_password} );
}
$xmpp_con->start();

########################################
# Report stuff and go into the event loop

AnyEvent::post_detect {
    warn "$0: My event model is \"$AnyEvent::MODEL\"\n" if $DEBUG;
};

$c->wait;
$irc_con->disconnect;
warn "$0: I'm done, goodbye.\n";

########################################
# The good stuff!

sub grapevine {
    my $p = shift;

    warn "$0: Grapevine: heard \""
      . $p->{text}
      . "\" from \""
      . $p->{who}
      . "\" on \""
      . $p->{channel} . "\"\n"
      if $DEBUG;

    for my $chan ( keys %{ $config{channels} } ) {
        next if $p->{channel} eq $chan;

        if ( $config{channels}{$chan}{type} eq 'irc' ) {
            warn "$0: Resending on $chan\n" if $DEBUG > 1;
            $irc_con->send_chan(
                $chan,
                'PRIVMSG',
                $chan,
                format_irc(
                    {
                        from => $p->{who},
                        text => $p->{text},
                        type => $p->{type}
                    }
                )
            );
        }
        elsif ( $config{channels}{$chan}{type} eq 'xmpp' ) {
            warn "$0: Resending on $chan\n" if $DEBUG > 1;
            $xmpp_con->send_message(
                format_xmpp(
                    {
                        from => $p->{who},
                        text => $p->{text},
                        type => $p->{type}
                    }
                ),
                $chan
            );
        }
        elsif ( $config{channels}{$chan}{type} eq 'broken_xmpp' ) {
            warn "$0: Resending on $chan\n" if $DEBUG > 1;
            xmpp_send_message(
                $xmpp_con,
                format_xmpp(
                    {
                        from => $p->{who},
                        text => $p->{text},
                        type => $p->{type}
                    }
                ),
                $chan
            );
        }
        else {
            warn "$0: Could not deliver message:\n";
            warn Dumper($p);
        }
    }
}

sub personal {
    my ( $who, $msg ) = @_;

    warn "$0: Personal message: \"$msg\" from \"$who\"\n" if $DEBUG;
    if ( $who eq 'nfn' ) {    #TODO: Eeeeeeeek!
        if ( $msg eq 'shutdown' ) {
            $c->broadcast("Nuno told me to go!");
        }
    }

    if (
        ( $who eq 'NickServ' )
        && ( $msg =~
/^This nickname is registered. Please choose a different nickname, or identify via/
        )
        && exists( $config{irc_password} )
      )
    {
        my $identify_command = "identify " . $config{irc_password};
        warn "IRC: Identifying myself to NickServ\n" if $DEBUG;
        $irc_con->send_srv( PRIVMSG => 'NickServ', $identify_command );
    }
}

sub parse_xmpp {
    my ($incoming_text) = @_;

    my $who;
    my $message;
    my $emote = 0;

    if ( $incoming_text =~ /^_(.+?)\s+(.+)_$/ ) {

        # It's an emote, Jim
        $who     = $1;
        $message = $2;
        $emote   = 1;
    }
    else {

        # They appear to be trying to communicate, Captain...
        my $trash;
        ( $trash, $who, $message ) = $incoming_text =~ /(\[(.+?)\]\s+)?(.+)$/;
    }

    if ( !$emote ) {
        if (   $who
            && ( $who eq $config{irc_nick} )
            && ( $message =~ /\[(woot|ouch)! now at (-?\d+)\]/ ) )
        {

            # This is an echo of a ++/-- that was done elsewhere
            $message = "Elsewhere karma was changed to $2";
        }
        elsif ( $message =~ /(.*)?\[(woot|ouch)! now at (-?\d+)\](.*)?/ ) {

            # This is a ++/-- done on this channel
            $message = "$1 $4";
        }

        if ( !$who ) {
            $who = '...';
        }
    }

    return ( $who, $message, $emote );
}

sub parse_irc {
    my ($incoming_text) = @_;
    return $incoming_text;
}

sub format_xmpp {
    my $p = shift;

    my $msg;
    if ( exists $p->{text} ) {
        $msg = $p->{text};
    }
    else {
        return;
    }

    if (   exists( $p->{from} )
        && exists( $p->{type} )
        && ( $p->{type} eq 'message' ) )
    {
        $msg = "[" . $p->{from} . "] " . $p->{text};
    }
    elsif (exists( $p->{from} )
        && exists( $p->{type} )
        && ( $p->{type} eq 'emote' ) )
    {
        $msg = "_" . $p->{from} . " " . $p->{text} . "_";
    }

    setUTF8($msg);
    return $msg;
}

sub format_irc {
    my $p = shift;

    my $msg;
    if ( exists $p->{text} ) {
        $msg = $p->{text};
        my $testmsg = $msg;
        my $success = utf8::downgrade($testmsg, 1);
        if (!$success) {
            warn "Failed to convert string \"".$p->{text}."\"";
            return;
        }
    }
    else {
        return;
    }

    if (   exists( $p->{from} )
        && exists( $p->{type} )
        && ( $p->{type} eq 'message' ) )
    {
        $msg = "<" . $p->{from} . "> " . $p->{text};
    }
    elsif (exists( $p->{from} )
        && exists( $p->{type} )
        && ( $p->{type} eq 'emote' ) )
    {
        $msg = "* *" . $p->{from} . "* " . $p->{text};
    }

    return $msg;
}

sub xmpp_send_message {
    my ( $connection, $message, $channel ) = @_;

    if ( $config{channels}{$channel}{type} eq 'xmpp' ) {
        $connection->send_message( $message, $channel, undef, 'chat' );
    }
    elsif ( $config{channels}{$channel}{type} eq 'broken_xmpp' ) {
        my $url =
          $config{channels}{$channel}{http_gateway} . "?msg="
          . url_encode_utf8($message);
        warn "XMPP: About to invoque: $url\n" if $DEBUG > 1;
        http_get $url, sub {
            my ( $body, $hdr ) = @_;

            if ( $hdr->{Status} =~ /^2/ ) {
                warn "XMPP: Sent via HTTP successfully\n" if $DEBUG > 1;
            }
            else {
                warn
"XMPP: Error sending message: $hdr->{Status} - $hdr->{Reason}\n";
            }
          }
    }
}
