#!/usr/bin/env perl

use warnings;
use strict;

use File::Spec;
use File::Basename 'dirname';

use lib join '/', File::Spec->splitdir( dirname(__FILE__) ), '..', 'lib';
use lib '/home/infobot/lib';

use AnyEvent;
use AnyEvent::IRC::Client;
use AnyEvent::XMPP::Client;
use AnyEvent::IRC::Util qw/prefix_nick/;
use JSON;

use Data::Dumper;

########################################
# Configuration

my $DEBUG = $ENV{DEBUG} || 1;
my $config_file = '../etc/subetha.cfg';

# Stuff bellow this line should really be configured in the config file
# specified above in $config_file

my %config = (
    irc_server  => 'irc.freenode.net',
    irc_port    => 6667,
    irc_channel => '#testchannel',

    xmpp_jid      => 'mybot@jabber.org',
    xmpp_password => 'verys3cret',
);

my $cfg = read_json_conf($config_file);
if ($cfg) {
    %config = %$cfg;
}

if ($DEBUG) {
    warn "Starting up with the following config:\n";
    warn Dumper( \%config );
}

sub read_json_conf {
    my $filename = shift;
    my $fh;
    if ( !open( $fh, '<', $filename ) ) {
        warn "Error opening the config file \"$filename\": $!\n";
        return;
    }
    my $json_conf = do { local $/; <$fh> };
    my $conf = decode_json($json_conf);
    return $conf;
}

#
########################################

my $c = AnyEvent->condvar;

# Setup IRC connecttion and stuff

my $irc_con = new AnyEvent::IRC::Client;

$irc_con->reg_cb(
    connect => sub {
        my ( $irc_con, $err ) = @_;

        if ( defined $err ) {
            warn "IRC connect error! => $err\n";
            $c->broadcast;
        }
        else {
            warn "IRC connected! Yay!\n" if $DEBUG;
        }

        # send IRC registration
        #$irc_con->send_msg( "NICK", $nick );
        #$irc_con->send_msg( "USER", $user || $nick, "*", "0", $real || $nick );
    },

    disconnect => sub {
        my ( $irc_con, $reason ) = @_;
        $reason = "no reason given" unless $reason;
        warn "Oh, IRC got a disconnect: $reason\n";
        $c->broadcast;
    },

    publicmsg => sub {
        my ( $irc_con, $channel, $ircmsg ) = @_;
        my $who = prefix_nick($ircmsg->{prefix});
        my $text = $ircmsg->{params}->[1];
        warn "Heard on IRC: \"$channel: $who: $text\"\n" if $DEBUG;
        grapevine($channel, $who, $text);
    },

    privatemsg => sub {
        my ( $irc_con, $nick, $ircmsg ) = @_;
        #warn Dumper $ircmsg;
        my $who = prefix_nick($ircmsg->{prefix});
        my $text = $ircmsg->{params}->[1];
        warn "Told me on IRC: $who->$nick: $text\n" if $DEBUG;
    },

    registered => sub { warn "I'm registered in IRC\n" if $DEBUG; },

    #    sent => sub {
    #        shift;
    #        warn "DEBUG IRC SENT: " . join( '|', @_ ) . "\n" if $DEBUG;
    #    },

    #    'irc_*' => sub {
    #        my @p = @{ delete $_[1]->{params} || [] };
    #        warn "DEBUG IRC: " . join( '|', %{ $_[1] }, @p ) . "\n" if $DEBUG;
    #    },

);

$irc_con->connect( $config{irc_server}, $config{irc_port},
    { nick => $config{irc_nick} } );

$irc_con->send_srv(
    PRIVMSG => 'nfn',
    "Hello there I'm the SubEtha proxy and I've just connected to IRC!"
);

$irc_con->send_srv( 'JOIN', $config{irc_channel} );
$irc_con->send_chan( $config{irc_channel}, 'PRIVMSG', $config{irc_channel},
    'Hi, my name is SubEtha and I\'ll be your friendly lobster proxy' );

# Setup XMPP connecttion and stuff

my $xmpp_con = new AnyEvent::XMPP::Client;

$xmpp_con->reg_cb(
    connected => sub {
        if ($DEBUG) {
            warn "XMPP connected with Jid\n";
            warn Dumper $_[0];
        }
    },
    connect_error => sub {
        warn "XMPP connection error\n";
        warn "JID:\n",   Dumper $_[0];
        warn "Error:\n", Dumper $_[1];
        $c->broadcast;
    },
);

$xmpp_con->add_account( $config{xmpp_jid}, $config{xmpp_password} );

$xmpp_con->start();

# Report stuff and go into the event loop

AnyEvent::post_detect {
    warn "My event model is \"$AnyEvent::MODEL\"\n" if $DEBUG;
};

$c->wait;
$irc_con->disconnect;
warn "I'm done, goodbye.\n";

sub grapevine {
    my ($channel, $who, $msg) = @_;

    warn "Grapevine: heard \"$msg\" from \"$who\" on \"$channel\"\n" if $DEBUG;
}
