#!/usr/bin/env perl

use warnings;
use strict;

use File::Spec;
use File::Basename 'dirname';

use lib join '/', File::Spec->splitdir( dirname(__FILE__) ), '..', 'lib';
use lib '/home/infobot/lib';

use AnyEvent;
use AnyEvent::IRC::Client;
use AnyEvent::XMPP::Client;
use AnyEvent::IRC::Util qw/prefix_nick/;
use JSON;
use String::SetUTF8;

use Data::Dumper;

########################################
# Configuration

my $DEBUG = $ENV{DEBUG} || 1;
my $config_file = '../etc/subetha.cfg';

my $connect_msg =
  "Hi, my name is SubEtha and I'll be your friendly lobster proxy";

# Stuff bellow this line should really be configured in the config file
# specified above in $config_file

my %config = (
    irc_server  => 'irc.freenode.net',
    irc_port    => 6667,
    irc_channel => '#testchannel',

    xmpp_jid      => 'mybot@jabber.org',
    xmpp_password => 'verys3cret',
    xmpp_chatroom => 'chat@im.partych.at',
);

my $cfg = read_json_conf($config_file);
if ($cfg) {
    %config = %$cfg;
}

if ($DEBUG) {
    warn "Starting up with the following config:\n";
    warn Dumper( \%config );
}

sub read_json_conf {
    my $filename = shift;
    my $fh;
    if ( !open( $fh, '<', $filename ) ) {
        warn "Error opening the config file \"$filename\": $!\n";
        return;
    }
    my $json_conf = do { local $/; <$fh> };
    my $conf = decode_json($json_conf);
    return $conf;
}

#
########################################

my $c = AnyEvent->condvar;
my @channels = ( 'irc', 'xmpp' );

########################################
# Setup IRC connecttion and stuff

my $irc_con = new AnyEvent::IRC::Client;

$irc_con->reg_cb(
    connect => sub {
        my ( $irc_con, $err ) = @_;

        if ( defined $err ) {
            warn "IRC: connect error: $err\n";
            $c->broadcast("IRC connection borked");
        }
        else {
            warn "IRC: connected.\n" if $DEBUG;
        }
    },

    disconnect => sub {
        my ( $irc_con, $reason ) = @_;

        $reason = "no reason given" unless $reason;
        warn "IRC: disconnected: $reason\n";
        $c->broadcast("IRC got disconnected");
    },

    publicmsg => sub {
        my ( $irc_con, $channel, $ircmsg ) = @_;

        my $who  = prefix_nick( $ircmsg->{prefix} );
        my $text = $ircmsg->{params}->[1];
        warn "IRC: \"$channel: $who: $text\"\n" if $DEBUG > 1;
        grapevine( 'irc', $who, $text );
    },

    privatemsg => sub {
        my ( $irc_con, $nick, $ircmsg ) = @_;

        #warn Dumper $ircmsg;
        my $who  = prefix_nick( $ircmsg->{prefix} );
        my $text = $ircmsg->{params}->[1];
        warn "IRC: \"$who\" told me \"$text\" in private (to \"$nick\")\n"
          if $DEBUG > 1;
        personal( $who, $text );
    },

    registered => sub { warn "IRC: registered\n" if $DEBUG; },
);

$irc_con->connect( $config{irc_server}, $config{irc_port},
    { nick => $config{irc_nick} } );
$irc_con->send_srv( 'JOIN', $config{irc_channel} );
$irc_con->send_chan( $config{irc_channel}, 'PRIVMSG', $config{irc_channel},
    $connect_msg );

########################################
# Setup XMPP connecttion and stuff

my $xmpp_debug = 0;
if ( $DEBUG > 2 ) { $xmpp_debug = 1 }
my $xmpp_con = new AnyEvent::XMPP::Client( debug => $xmpp_debug );

$xmpp_con->reg_cb(
    connected => sub {
        my ( $connection, $account ) = @_;

        warn "XMPP: connected with account " . $account->jid . "\n" if $DEBUG;
    },

    session_ready => sub {
        my ($connection) = @_;

        warn "XMPP: Session is ready, let's rock n' roll\n" if $DEBUG;
        $connection->send_message( $connect_msg, $config{xmpp_chatroom} );
    },

    added_account => sub {
        my ( $connection, $account ) = @_;

        warn "XMPP: Account added: " . $account->jid . "\n" if $DEBUG;
    },

    message => sub {
        my ( $connection, $account, $msg ) = @_;

        my $text = $msg->body;
        warn "XMPP: \"$text\"\n" if $DEBUG > 1;
        grapevine( 'xmpp', '', $text );
    },

    connect_error => sub {
        my ( $connection, $account, $reason ) = @_;

        warn "XMPP: connection error! JID: "
          . $account->jid
          . ", reason: \"$reason\"\n";
        $c->broadcast("XMPP connection borked");
    },

    error => sub {
        my ( $connection, $account, $error ) = @_;

        warn "XMPP: Error with account "
          . $account->jid . ": \""
          . $error->string . "\"\n";

        # TODO: Probably should try disconnecting and reconnecting here...
    }
);

$xmpp_con->add_account( $config{xmpp_jid}, $config{xmpp_password} );
$xmpp_con->start();

#$xmpp_con->set_presence('available', '', '');

########################################
# Report stuff and go into the event loop

AnyEvent::post_detect {
    warn "My event model is \"$AnyEvent::MODEL\"\n" if $DEBUG;
};

$c->wait;
$irc_con->disconnect;
warn "I'm done, goodbye.\n";

########################################
# The good stuff!

sub grapevine {
    my ( $channel, $who, $msg ) = @_;

    warn "Grapevine: heard \"$msg\" from \"$who\" on \"$channel\"\n" if $DEBUG;

    for my $chan ( @channels ) {
        next if $channel eq $chan;

        if ( $chan eq 'irc' ) {
            my ( $who, $msg_1 ) = $msg =~ /\[(.+)\]\s+(.+)$/;
            if ( $who && $msg_1 ) {
                $msg = "<$who> $msg_1";
            }
            $irc_con->send_chan( $config{irc_channel}, 'PRIVMSG',
                $config{irc_channel}, $msg );
        }
        elsif ( $chan eq 'xmpp' ) {
            if ($who) {
                $msg = "[$who] $msg";
            }
            setUTF8($msg);
            $xmpp_con->send_message( $msg, $config{xmpp_chatroom} );
        }
        else {
            warn
"Message received from unknown channel! channel:\"$channel\"; who:\"$who\";msg:\"$msg\"\n";
        }
    }
}

sub personal {
    my ( $who, $msg ) = @_;

    warn "Personal message: \"$msg\" from \"$who\"\n" if $DEBUG;
    if ( $who eq 'nfn' ) {    #TODO: Eeeeeeeek!
        if ( $msg eq 'shutdown' ) {
            $c->broadcast("Nuno told me to go!");
        }
    }
}
